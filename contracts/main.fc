;; op - 1 - create campaign
;; op - 2 - create affiliate
;; op - 3 - withdraw amount from campaign and tranfer to affiliate and update affiliate count

#include "imports/stdlib.fc";

const const::min_tons_for_storage = 10000000; ;; 0.01 TON

(slice, cell) load_data() inline {
    slice ds =  get_data().begin_parse();
    slice admin_address = ds~load_msg_addr();
    return (admin_address, ds~load_dict());
}

() save_data(slice admin_address, int budget, slice campaign_wallet_address, cell category, cell company_name, cell original_url, slice user_address, slice unique_hash) impure inline {
    slice cs = get_data().begin_parse();
    slice address = cs~load_msg_addr();
    cell user_data_map = cs~load_dict();

    cell user_data = begin_cell()
        .store_slice(admin_address)
        .store_uint(budget, 32)
        .store_slice(campaign_wallet_address)
        .store_ref(category)
        .store_ref(company_name)
        .store_ref(original_url)
        .end_cell();
    
    user_data_map~udict_set(256, campaign_wallet_address~load_uint(32), user_data.begin_parse());

    set_data(
      begin_cell()
        .store_dict(user_data_map)
      .end_cell()
    );
}

() save_affiliate_data(slice affiliate_address, slice campaign_address, cell shortner_url, cell original_url, int total_clicks, int total_earned, slice unique_hash) impure inline {
    slice ds = get_data().begin_parse();
    slice address = ds~load_msg_addr();
    cell user_data_map = ds~load_dict();

    cell user_data = begin_cell()
                    .store_slice(affiliate_address)
                    .store_slice(campaign_address)
                    .store_ref(shortner_url)
                    .store_ref(original_url)
                    .store_uint(total_clicks, 32)
                    .store_uint(total_earned, 32)
                    .end_cell();
    
    user_data_map~udict_set(256, unique_hash~load_uint(32), user_data.begin_parse());
    
    set_data(
            begin_cell()
            .store_dict(user_data_map)
            .end_cell()
        );
}

 (slice, slice, cell, cell, int, int) get_user_from_dict(slice user) method_id {
    return (
            user~load_msg_addr(),
            user~load_msg_addr(),
            user~load_ref(),
            user~load_ref(),
            user~load_uint(32),
            user~load_uint(32)
        );
    }

 () update_affiliate_data(slice affiliate_unqiue_hash_address, int earned_coin) impure inline {
    var ( admin_address, users) = load_data();    
    var (user, f) = udict_get?(users, 256, affiliate_unqiue_hash_address~load_uint(32));

    var (affiliate_address,
        campaign_address,
        shortner_url,
        original_url,
        total_clicks,
        total_earned) = get_user_from_dict(user);

    total_clicks = total_clicks + 1;
    total_earned  = total_earned + earned_coin;
    save_affiliate_data(affiliate_address, campaign_address, shortner_url, original_url, total_clicks, total_earned, affiliate_unqiue_hash_address);
 }

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) {
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    slice ds =  get_data().begin_parse();
    slice admin_address = ds~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    
    if(op == 1){
        int budget = in_msg_body~load_uint(32);
        slice campaign_wallet_address = in_msg_body~load_msg_addr();
        cell category = in_msg_body~load_ref();
        cell company_name = in_msg_body~load_ref();
        cell original_url = in_msg_body~load_ref();
        slice campaign_hash_address = in_msg_body~load_msg_addr();
        save_data(admin_address, budget, campaign_wallet_address, category, company_name, original_url, sender_address, campaign_hash_address);

        return ();
    }

    if(op == 2){
        slice affiliate_address = in_msg_body~load_msg_addr();
        slice campaign_address = in_msg_body~load_msg_addr();
        cell shortner_url = in_msg_body~load_ref();
        cell original_url = in_msg_body~load_ref();
        int total_clicks = in_msg_body~load_uint(32);
        int total_earned = in_msg_body~load_uint(32);
        slice affiliate_hash_address = in_msg_body~load_msg_addr();
        save_affiliate_data(affiliate_address, campaign_address, shortner_url, original_url, total_clicks, total_earned, affiliate_hash_address);

        return ();
    }
    
    if(op == 3){
        throw_unless(103, equal_slice_bits(sender_address, admin_address));
        int withdraw_amount = in_msg_body~load_coins();
        slice affiliate_address = in_msg_body~load_msg_addr();
        var [balance, _] = get_balance(); ;;smart contract balanace
        throw_unless(104, balance >= withdraw_amount);

        int return_value = min(withdraw_amount, balance - const::min_tons_for_storage);

        int msg_mode = 1; ;; 0 (Ordinary message) + 1 (Pay transfer fees separately from the message value)
    
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(affiliate_address) ;; destination address ;; might be affiliate address
            .store_coins(return_value)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
        
        send_raw_message(msg.end_cell(), msg_mode);
        
        return ();
    }

    if( op == 4){
        slice affiliate_unqiue_hash_address = in_msg_body~load_msg_addr();
        int earned_coin = in_msg_body~load_uint(32);
        update_affiliate_data(affiliate_unqiue_hash_address,  earned_coin);

        return ();
    }

    if( op == 5){
        return ();
    }

    throw(777);
}

(int) balance() method_id {
    var [balance, _] = get_balance();
    return balance;
}