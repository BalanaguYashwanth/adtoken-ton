;; config inital data -> can be extract from -> get_data()
;; send_incr -> can be extract from -> in_msg_body -> 3rd paramter

#include "imports/stdlib.fc";

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr(); ;; this sender_address comes from sender of provider like provider(sender, {value, sendData})

    ;; send_increment_fn of body cell like beginCell().loadUint(1, 32).loadUint(2, 32).loadAddresss(addrress).endCell();
    int op = in_msg_body~load_uint(32); ;; inside loadUint(1) is op
    int increment_value = in_msg_body~load_uint(32);
    slice counter_user_address = in_msg_body~load_msg_addr(); ;; address comes from send_increment_fn
    
    if(op == 1){
        slice ds =  get_data().begin_parse(); ;; get data comes from initial config of smart contract
        slice init_address = ds~load_msg_addr(); ;; this comes from inital config data but we are not using it 
        int counter = ds~load_uint(32); ;; counter comes from the config 
        cell name = ds~load_ref();
        set_data(begin_cell().store_uint(counter + increment_value + 1, 32).store_slice(counter_user_address).store_ref(name).end_cell());
    }
}

(int, slice, cell) get_contract_latest_counter() method_id {
    slice ds = get_data().begin_parse();
    return (ds~load_uint(32),ds~load_msg_addr(),ds~load_ref());
}