;; config inital data -> can be extract from -> get_data()
;; send_incr -> can be extract from -> in_msg_body -> 3rd paramter

#include "imports/stdlib.fc";

(slice, int, cell) load_data() inline {
    slice ds =  get_data().begin_parse(); ;; these values get from config
    return (ds~load_msg_addr(), ds~load_uint(32), ds~load_ref()); ;; should be order according to config
}

() save_data(slice address, int counter_value, cell name) impure inline {
    set_data(begin_cell().store_slice(address).store_uint(counter_value, 32).store_ref(name).end_cell()); ;; order should be according to config
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    slice cs = in_msg.begin_parse();
    int flags = cs~load_uint(4);

    slice sender_address = cs~load_msg_addr(); ;; this sender_address comes from sender of provider like provider(sender, {value, sendData})

    ;; send_increment_fn of body cell like beginCell().loadUint(1, 32).loadUint(2, 32).loadAddresss(addrress).endCell();
    int op = in_msg_body~load_uint(32); ;; inside loadUint(1) is op
    int increment_value = in_msg_body~load_uint(32);
    slice counter_user_address = in_msg_body~load_msg_addr(); ;; address comes from send_increment_fn
    
    var (init_address, counter, name) = load_data();
    if(op == 1){    
        save_data(counter_user_address, counter + increment_value + 1, name);  ;; should be order according to config
    }
}

(slice, int, cell) get_contract_latest_counter() method_id {
    return load_data();
}